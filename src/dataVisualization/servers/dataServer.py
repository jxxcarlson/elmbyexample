#!/usr/bin/env python

"""
dataServer responds to the Request

  http://localhost:8000/n=1000

with a list of integers generated by
Brownian motion.  That is, one begins
with an initial value (say, 0) and
repeatedly adds random elements of
{+1, -1} to it.  The result is returned
as a string, e.g.,

   "[0, 1, 2, 3, 2, 1, 0, -1, -2, -3, ... ]"

System structure:

The server gets data in do_GET via

   `self.wfile.write(reply(self.path))`

Thus all you have to do is define the
function `reply` in module reply.
This function accepts a string as argument
and returns a stringified list as value.

The string is a command which takes the
form 'n=1000' in this example.  More
generally, the command parser in module
"reply" can parse commmands of the form
'key1=value1&key2=value2&ETC'

"""



"""
Source: https://gist.github.com/bradmontgomery/2219997

Very simple HTTP server in python.
Usage::
    ./dataServer.py 8000
Send a GET request::
    curl http://localhost:8000/n=1000
Send a HEAD request::
    curl -I http://localhost:8000
Send a POST request::
    curl -d "foo=bar&bin=baz" http://localhost:8000
"""
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import SocketServer
import os
from reply import reply

# Generate a series of n numbers
# by adding random -1, +1 to an
# initial value
def generate(n, initial_value):
    x = initial_value
    output = [x]
    for i in range(0,n):
        x = x + 2*random.randint(0,1) - 1
        output.append(x)
    return output


class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()

    def do_GET(self):
        self._set_headers()
        self.wfile.write(reply(self.path))

    def do_HEAD(self):
        self._set_headers()

    def do_POST(self):
        # Doesn't do anything with posted data
        self._set_headers()
        self.wfile.write("<html><body><h1>POST!</h1></body></html>")

def run(server_class=HTTPServer, handler_class=S, port=80):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print 'Starting httpd...'
    httpd.serve_forever()

if __name__ == "__main__":
    from sys import argv

    if len(argv) == 2:
        run(port=int(argv[1]))
    else:
        run()
